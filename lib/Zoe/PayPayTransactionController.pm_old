package Zoe::PayPayTransactionController;

use Business::PayPal::API::ExpressCheckout;
use Business::PayPal::API::RefundTransaction;

use Data::Serializer;
use Mojo::Base 'Mojolicious::Controller';
use FindBin;
use Data::Dumper;
use Mojo::Log;

BEGIN { unshift @INC, "$FindBin::Bin/../"; }
use Zoe::DO::Cart;
use Zoe::DO::CartItem;

sub _get_cart {
    my $self = shift;
    my $logger = $self->get_logger('paypal');
    #get cart from session
    my $paypal_config = $self->get_paypal_config;
    my $cart_session_key = $paypal_config->{cart_session_key} || '__CART__';
    my $serialized_cart= $self->session($cart_session_key);
    
    unless ($serialized_cart) {
        return Zoe::DO::Cart->new ;
        $logger->debug(__PACKAGE__ . ': New Cart created');
    }
    $logger->debug(__PACKAGE__ . ': Cart returned from session variable ' . $cart_session_key);
    return Data::Serializer->new()->deserialize($serialized_cart); 
        
}

sub paypal_transaction {
    my $self = shift;
    my $paypal_config = $self->get_paypal_config(); 
    my $type = $paypal_config->{sellable_object};
    require  $type . ".pm";
    my @all = $type->find_all();    
    my $cart = $self->_get_cart();
    my $layout = 'zoe';
    $self->render(template => 'paypal_transaction', all => \@all, cart => $cart , layout=>$layout);
    
}


sub _set_cart {
    my $self = shift;
    my $cart = shift;
    #get cart from session
    my $paypal_config = $self->get_paypal_config;
    my $cart_session_key = $paypal_config->{cart_session_key} || '__CART__';
    my $serialized_cart = Data::Serializer->new()->serialize($cart); 
    $self->session($cart_session_key =>  $serialized_cart);
    return 1;
}


sub paypal_cancel {
    my $self = shift;
     
}

sub view_cart {
    my $self = shift;
    my $cart = $self->_get_cart();
    my $post_paypal_redirect_to = $self->param('__POSTPAYPALREDIRECT__') || 0;
    my $updating_cart_view = $self->param('updating_cart_view') || 0;
    my $template = 'cart';
    if ( $updating_cart_view ) {
        #$template = 'cart';
    }
    
    my $layout = $self->param('layout') || 0;
    my $cart_html = $self->render('template' => $template, partial =>1, cart => $cart, layout=> $layout, post_paypal_redirect_to => $post_paypal_redirect_to);
       
    if ($self->req->is_xhr  ){ 
        print $cart_html;
        $self->render( text => $cart_html  );           
    }else {    
        $self->render (
            template => 'cart', cart => $cart, layout => $layout, 
            post_paypal_redirect_to => $post_paypal_redirect_to
        );
    }
}

sub add_to_cart {
    my $self = shift;
    my %args = ();
    
    my $paypal_config = $self->get_paypal_config;
    #my $sellable_object_map = %{ $paypal_config ->{sellable_object_map}};
    my $sellable_object = $paypal_config->{sellable_object};
    #print Dumper %paypal_config;
    require $sellable_object . ".pm";
    
    my $object = $sellable_object->find($self->param('item_id'));
    #print Dumper $object;
    
    $args{quantity} = $self->param('quantity');
    $args{item_type} = $sellable_object;
    $args{item_id} = $self->param('item_id');
    $args{price} =  $object->get_price();
    $args{title} = $object->get_title;
    
    my $cart = $self->_get_cart();
    $cart->add_to_cart(%args);
    $self->_set_cart($cart);
    
    return $self->_do_redirect_or_render();
}

sub update_cart_item_quantity {
    my $self = shift;
    #print Dumper $self->req->params();
    my $quantity = $self->param('cart_item_quantity') ;
    my $index = $self->param('cart_item_index');
    my $cart = $self->_get_cart();
    
    if (! $quantity  ) {
    #remove item from cart
        $cart->remove_from_cart($index);
        $self->_set_cart($cart);  
        #return $self->view_cart();
       
    } else {
        my %cartItems = %{$cart->CartItems()};
        #print Dumper $cart;
        my $cart_item = $cartItems{$index};
        
       $cart_item->quantity($quantity);
        $cartItems{$index} = $cart_item;
        $cart->CartItems(\%cartItems);  
        $self->_set_cart($cart);  
    }
     
    return $self->_do_redirect_or_render();
    
}

sub remove_from_cart {
    my $self = shift;
    my $index = $self->param('cart_item_index');
    my $cart = $self->_get_cart();
    $cart->remove_from_cart($index);
    $self->_set_cart($cart);    
    
    my $redirect_to = $self->param('redirect_to');
    
    return $self->_do_redirect_or_render();
      
}
sub _do_redirect_or_render {
    my $self = shift;
     my $redirect_to = $self->param('redirect_to') || 0;
    
    if ($redirect_to) {
        
        return $self->redirect_to( $self->url_with($redirect_to));
    } else {
        return $self->view_cart();
    }
}





sub _get_paypal {
    my $self    = shift;
    my $name    = shift || 'ExpressCheckout'; 
    my %paypal_classes = (
                            ExpressCheckout => 'Business::PayPal::API::ExpressCheckout',
                            RefundTransaction => 'Business::PayPal::API::RefundTransaction',
                        );
    my $paypal_class = $paypal_classes{$name};
                        
    my $config = "$FindBin::Bin/../config/paypal.yml";
    my $paypal_config = $self->get_paypal_config;
    
    $Business::PayPal::API::Debug = 1;
    my $paypal = new $paypal_class (
        Username  => $paypal_config->{Username},
        Password  => $paypal_config->{Password},
        Signature => $paypal_config->{Signature},
        sandbox   => $paypal_config->{sandbox}
    );

    return $paypal;
}

sub _transaction_failed {
    my $self = shift;
    my $message = shift;
    my $step = ( caller(1) )[3];
    my $paypal_config = $self->get_paypal_config();
    my $logger = $self->get_logger('paypal');
    $logger->debug(__PACKAGE__ .": Paypal transaction failed at step $step " . $message);
    #redirect to transaction_failed_url_name:  
    if ( $paypal_config->{transaction_failed_url_name} ) {
        $logger->debug(__PACKAGE__ . ": Redirecting to " . $paypal_config->{transaction_failed_url_name} );
        return $self->redirect_to( $self->url_for( $paypal_config->{transaction_failed_url_name} ) );    
    }
    #remove session variables
    $self->_remove_cart_from_session();
    
    #render the template
    return $self->render( template => 'paypal_transaction_failed');    
}
 
sub set_express_checkout {
    my $self = shift;
    my $paypal = $self->_get_paypal();
    my $logger = $self->get_logger('paypal');

    #paypal config
    my $paypal_config = $self->get_paypal_config;
    #get cart from session
    my $cart = $self->_get_cart();
    my $serialized_cart = Data::Serializer->new()->serialize($cart);
    

    #build paypal request 
    my $return_url = $self->url_for('__DOEXPRESSCHECKOUT__')->to_abs;
    my $cancel_url = $self->url_for('__PAYPALCANCEL__')->to_abs;
    #convert int to float
    my $total = sprintf( "%.2f", $cart->update_total )
      if ( int( $cart->update_total() ) );
      
    #paypal api work around
    delete $ENV{$_} for grep { /^(HTTPS|SSL)/ } keys %ENV;
    local $IO::Socket::SSL::VERSION = undef;
    
    my %paypal_response = $paypal->SetExpressCheckout(
        OrderTotal              => $total,
        ReturnURL               => "$return_url",
        CancelURL               => "$cancel_url",
        NoShipping              => 1,
        L_PAYMENTREQUEST_0_NAME => 'purchase of CaribUniverse',
        L_PAYMENTREQUEST_0_AMT  => $total,
        L_PAYMENTREQUEST_0_QTY  => 1,
        L_PAYMENTREQUEST_0_ITEMCATEGORY => 'digital',
    );
    unless ($paypal_response{Ack} =~ /Success/i ) {       
        return $self->_transaction_failed( ' SetExpressCheckout failed');   
    }
    $logger->debug(__PACKAGE__ . ": Paypal SetExpressCheckout success for token " . $paypal_response{Token} );        
    #add paypal payment details to the session
    $self->session( 'Token' => $paypal_response{Token} ); 
    $self->session( $paypal_response{Token} . '_cart'    => $serialized_cart );
            
    #redirect_to paypal
    my $paypal_url = $paypal_config->{payment_url};
    my  $redirect_to = $paypal_url . $paypal_response{Token};
    
    my $post_paypal_redirect_to = $self->param('__POSTPAYPALREDIRECT__') || 0;
    $self->session($paypal_response{Token} . "__POSTPAYPALREDIRECT__" => $post_paypal_redirect_to);
    
    $logger->debug(__PACKAGE__ . ": Redirecting to paypal at $redirect_to");
    return $self->redirect_to( $redirect_to );
}

sub _remove_cart_from_session {
    my $self = shift;
    my $token = $self->session( 'Token' ); 
    my $paypal_config = $self->get_paypal_config;
    my $cart_session_key = $paypal_config->{cart_session_key} || '__CART__';
    
    delete $self->session->{Token};
    delete $self->session->{$token . '_cart'};
    delete $self->session->{$cart_session_key};
    return 1;
}

sub _log {
    my $self = shift;
    my $caller = ( caller(1) )[3];
    my $message = __PACKAGE__ .':'. $caller . ': ' . shift;
    my $logger = $self->get_logger( 'paypal' );
    return $logger->debug( $message );
}

sub do_express_checkout {
    my $self = shift;
        
    #get paypal config
    my $paypal_config = $self->get_paypal_config;
    
    #get cart info that was serialized with the token
    my $token  = $self->session('Token');     
    my $serialized_cart= $self->session($token . '_cart');
    my $cart = Data::Serializer->new()->deserialize($serialized_cart);
    
    return $self->_transaction_failed( ' No Token') unless ($token);
    my $paypal = $self->_get_paypal();

    my %paypal_details = $paypal->GetExpressCheckoutDetails($token);
    unless ($paypal_details{Ack} =~ /Success/i ) {       
        return $self->_transaction_failed( ' GetExpressCheckoutDetails failed ');   
    }
    
    
    my %payinfo = $paypal->DoExpressCheckoutPayment(
          Token         => $token,
          PaymentAction => 'Sale',
          PayerID       => $paypal_details{PayerID},
          OrderTotal    => $cart->total,
    );

    unless ($payinfo{Ack} =~ /Success/i ) {       
        return $self->_transaction_failed( ' DoExpressCheckoutPayment failed ');   
    }
    my $transaction_id = $payinfo{TransactionID};
    $self->_log("Transaction for succcessful for Transaction $transaction_id " );
           
    my $type            = $paypal_config->{payment_record_object};    
   
    require  $type . ".pm";  
    my %payment_record_map      = %{ $paypal_config->{payment_record_map} }; 
    my %cart_item_map        = %{ $paypal_config->{cart_item_map} };
    #get current user id
    my $user_session_key =  $paypal_config->{user_session_key};
    my $payment_record_user_member = $paypal_config->{payment_record_user_member};
    my $user_id         =  $self->session($user_session_key);
    
    my %cartItems = %{ $cart->CartItems };
    foreach my $index (keys (%cartItems) ){    
        my $cartItem = $cartItems{$index };
        my $record          = $type->new;  
        $record->{$payment_record_user_member} = $user_id;
        foreach my $cartItem_method ( keys (%cart_item_map )) {
            
            my $record_member = $cart_item_map{$cartItem_method};
            $record->{$record_member} = $cartItem->$cartItem_method;
        }
        
            print "\n\nDETAILS\n";
         print Dumper %paypal_details;
         print "\n\n\nResponsse\n";
         print Dumper %payinfo;
        foreach my $paypal_key (keys (%payment_record_map) ) {
            my $session_key = $token . $paypal_key;           
            my $member = $payment_record_map{$paypal_key};
            $record->{$member} = $payinfo{$paypal_key} || $paypal_details{$paypal_key};           
        }   
        unless ( $record->save() ) {
            $self->_refund_transaction( $transaction_id );
            return $self->_transaction_failed(' Record Save Failed');        
        }
    }    
    my $redirect_to ;
    if ( $self->session($token . "__POSTPAYPALREDIRECT__") ) {
        $redirect_to = $self->url_with($self->session($token . "__POSTPAYPALREDIRECT__"));
    }else {
        $redirect_to = $self->url_with($paypal_config->{payment_complete_route}->{name});
    }   
    $self->_remove_cart_from_session();
    
    #add the payer email to the session
    $self->session('__PAYPALPAYER__' => $paypal_details{Payer} );
    $self->redirect_to($redirect_to);
}

sub _refund_transaction {
    my $self = shift;
    my $transaction_id = shift;
    my $paypal = $self->_get_paypal('RefundTransaction');
    
    my %paypal_response = $paypal->RefundTransaction( TransactionID => $transaction_id,
                                         RefundType    => 'Full',
                                         Memo          => "Please come again!" 
                               );
   if( $paypal_response{Ack} !~ /Success/i ) {
      for my $error ( @{$paypal_response{Errors}} ) {
          $self->_log ( "Error: " . $error->{LongMessage} );
      }
      return $self->_transaction_failed("Transaction Refund for $transaction_id failed");
  } 
  $self->_log("Refund complete for $transaction_id");
  return 1;  
}


1;
